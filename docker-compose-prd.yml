version: '3'
networks:
  main:

services:
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.${ENTRYPOINT}.address=:${HTTP_PROTOCOL_PORT}"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${CERTIFICATE_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "${HTTP_PROTOCOL_PORT}:${HTTP_PROTOCOL_PORT}"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  db:
    container_name: "${DB_HOST}"
    image: postgres:12.4-alpine
    volumes:
      - "./.data:/var/lib/postgresql/data:rw"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`${DB_HOST}`)"
      - "traefik.http.routers.postgres.entrypoints=${ENTRYPOINT}"
      - "traefik.http.routers.postgres.tls.certresolver=myresolver"

  api:
    container_name: "${API_URL}"
    build: ./registry/backend/${ENVIRONMENT}/
    volumes:
      - "./backend:/opt/app-root/src:rw"
    ports:
      - ${HTTP_PORT}
    environment:
      PORT: ${HTTP_PORT}
      APP_ENV: "${ENVIRONMENT}"
      NODE_ENV: "${ENVIRONMENT}"

      HASH_SECRET: ${HASH_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      TOKEN_EXPIRE_IN: ${TOKEN_EXPIRE_IN}
      REFRESHTOKEN_EXPIRE_IN_DAYS: ${REFRESHTOKEN_EXPIRE_IN_DAYS}
      SIMPLE_USER: "${SIMPLE_USER}"
      SYSTEM_USER: "${SYSTEM_USER}"
      COMPANY_DOMAIN: "thegodstack.com"
      JWT_AUD: ${JWT_AUD}
      JWT_ISS: ${JWT_ISS}

      EMAIL_FROM: ${EMAIL_FROM}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      
      SPA_URL: ${SPA_URL}

      DB_PORT: "${DB_PORT}"
      DB_HOST: "${DB_HOST}"
      DB_USER: "${DB_USER}"
      DB_PASS: "${DB_PASS}"
      DB_DATABASE: "${DB_NAME}"

      DEBUG: "true"
    command: ['./wait-for-it.sh', '-t', '0', '${DB_HOST}:5432', '--', '.s2i/bin/assemble']
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_URL}`)"
      - "traefik.http.routers.api.entrypoints=${ENTRYPOINT}"
      - "traefik.http.routers.api.tls.certresolver=myresolver"

  spa:
    container_name: "${SPA_URL}"
    build: ./registry/frontend/${ENVIRONMENT}/
    volumes:
      - "./frontend:/opt/app-root/src:rw"
    ports:
      - ${HTTP_PORT}
    environment:
      PORT: ${HTTP_PORT}
      APP_ENV: "${ENVIRONMENT}"
      NODE_ENV: "${ENVIRONMENT}"
      HTTP_API_URL: 'http://${API_URL}/'
      WS_API_URL: 'ws://${API_URL}/graphql'
      CLIENT: "${CLIENT}"
      DEBUG: "true"
    command: ['./wait-for-it.sh', '-t', '0', '${API_URL}:${HTTP_PORT}', '--', '.s2i/bin/assemble']
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.spa.rule=Host(`${SPA_URL}`)"
      - "traefik.http.routers.spa.entrypoints=${ENTRYPOINT}"
      - "traefik.http.routers.spa.tls.certresolver=myresolver"
