version: '3'
networks:
  main:

services:

  proxy:
    networks:
      main:
        aliases:
          - "${PROXY_URL}"
    container_name: "${PROXY_URL}"
    image: jwilder/nginx-proxy:alpine
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro"
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

  db:
    networks:
      main:
        aliases:
          - "${DB_HOST}"
    container_name: "${DB_HOST}"
    image: postgres:12.4-alpine
    volumes:
      - "./.data:/var/lib/postgresql/data:rw"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"
    restart: unless-stopped

  api:
    networks:
      main:
        aliases:
          - "${API_URL}"
    container_name: "${API_URL}"
    build: ./registry/backend/${ENVIRONMENT}/
    volumes:
      - "./backend:/opt/app-root/src:rw"
    ports:
      - ${HTTP_PORT}
    environment:
      VIRTUAL_HOST: "${API_URL}"
      VIRTUAL_PORT: ${HTTP_PORT}
      PORT: ${HTTP_PORT}
      APP_ENV: "${ENVIRONMENT}"
      NODE_ENV: "${ENVIRONMENT}"

      HASH_SECRET: ${HASH_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      TOKEN_EXPIRE_IN: ${TOKEN_EXPIRE_IN}
      REFRESHTOKEN_EXPIRE_IN_DAYS: ${REFRESHTOKEN_EXPIRE_IN_DAYS}
      SIMPLE_USER: "${SIMPLE_USER}"
      SYSTEM_USER: "${SYSTEM_USER}"
      COMPANY_DOMAIN: "thegodstack.com"
      JWT_AUD: ${JWT_AUD}
      JWT_ISS: ${JWT_ISS}

      EMAIL_FROM: ${EMAIL_FROM}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      
      SPA_URL: ${SPA_URL}

      DB_PORT: "${DB_PORT}"
      DB_HOST: "${DB_HOST}"
      DB_USER: "${DB_USER}"
      DB_PASS: "${DB_PASS}"
      DB_DATABASE: "${DB_NAME}"

      DEBUG: "true"
    command: ['./wait-for-it.sh', '-t', '0', '${DB_HOST}:5432', '--', '.s2i/bin/assemble']
    restart: unless-stopped

  spa:
    networks:
      main:
        aliases:
          - "${SPA_URL}"
    container_name: "${SPA_URL}"
    build: ./registry/frontend/${ENVIRONMENT}/
    volumes:
      - "./frontend:/opt/app-root/src:rw"
    ports:
      - ${HTTP_PORT}
    environment:
      VIRTUAL_HOST: "${SPA_URL}"
      VIRTUAL_PORT: ${HTTP_PORT}
      PORT: ${HTTP_PORT}
      APP_ENV: "${ENVIRONMENT}"
      NODE_ENV: "${ENVIRONMENT}"
      HTTP_API_URL: 'http://${API_URL}/'
      WS_API_URL: 'ws://${API_URL}/graphql'
      CLIENT: "${CLIENT}"

      DEBUG: "true"
    command: ['./wait-for-it.sh', '-t', '0', '${API_URL}:${HTTP_PORT}', '--', '.s2i/bin/assemble']
    restart: unless-stopped
