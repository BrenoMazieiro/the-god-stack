version: '3'
networks:
  main:

services:
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--global.sendAnonymousUsage=false"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  db:
    container_name: "${DB_HOST}"
    image: postgres:12.4-alpine
    volumes:
      - "./.data:/var/lib/postgresql/data:rw"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.pg-web.rule: Host(`${DB_HOST}`)
      traefik.http.routers.pg-web.entrypoints: http

  api:
    container_name: "${API_URL}"
    build:
      context: ./backend
      dockerfile: ./registry/${ENVIRONMENT}/Dockerfile
    volumes:
      - "./backend:/opt/app-root/src:rw"
    ports:
      - ${CONTAINERS_PORT}
      - "9229:9229"
    environment:
      PORT: ${CONTAINERS_PORT}
      APP_ENV: "${ENVIRONMENT}"
      NODE_ENV: "${ENVIRONMENT}"

      HASH_SECRET: ${HASH_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      TOKEN_EXPIRE_IN: ${TOKEN_EXPIRE_IN}
      REFRESHTOKEN_EXPIRE_IN_DAYS: ${REFRESHTOKEN_EXPIRE_IN_DAYS}
      SIMPLE_USER: "${SIMPLE_USER}"
      SYSTEM_USER: "${SYSTEM_USER}"
      COMPANY_DOMAIN: "thegodstack.com"
      JWT_AUD: ${JWT_AUD}
      JWT_ISS: ${JWT_ISS}

      EMAIL_FROM: ${EMAIL_FROM}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      
      SPA_URL: ${SPA_URL}

      DB_PORT: "${DB_PORT}"
      DB_HOST: "${DB_HOST}"
      DB_USER: "${DB_USER}"
      DB_PASS: "${DB_PASS}"
      DB_DATABASE: "${DB_NAME}"

      DEBUG: "true"
    command: ['./wait-for-it.sh', '-t', '0', '${DB_HOST}:5432', '--', '.s2i/bin/assemble']
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.api-web.rule: Host(`${API_URL}`)
      traefik.http.routers.api-web.entrypoints: http

  spa:
    container_name: "${SPA_URL}"
    build:
      context: ./frontend
      dockerfile: ./registry/${ENVIRONMENT}/Dockerfile
    volumes:
      - "./frontend:/opt/app-root/src:rw"
    ports:
      - ${CONTAINERS_PORT}
    environment:
      PORT: ${CONTAINERS_PORT}
      APP_ENV: "${ENVIRONMENT}"
      NODE_ENV: "${ENVIRONMENT}"
      HTTP_API_URL: 'http://${API_URL}/'
      HTTP_SPA_URL: 'http://${SPA_URL}/'
      WS_API_URL: 'ws://${API_URL}/graphql'
      CLIENT: "${CLIENT}"
      DEBUG: "true"
    command: ['./wait-for-it.sh', '-t', '0', '${API_URL}:${CONTAINERS_PORT}', '--', '.s2i/bin/assemble']
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.spa-web.rule: Host(`${SPA_URL}`)
      traefik.http.routers.spa-web.entrypoints: http

  ci-cypress:
    container_name: ci-cypress
    build:
      context: ./frontend
      dockerfile: ./registry/${ENVIRONMENT}/Dockerfile
    volumes:
      - "./frontend:/opt/app-root/src:rw"
    command: ['./wait-for-it.sh', '-t', '0', '${SPA_URL}:${CONTAINERS_PORT}', '--', 'ok']
